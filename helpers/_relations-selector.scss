@charset "UTF-8";

/// Selector of single or multiple at relationship.
///
/// @param {String | List} $modifiers - Name of modifier that will come after ".[block]--"
///
/// @returns {String} - .[block]--[modifier].[block]--[modifier]
///
/// @see {mixin} at

@function at-selector($modifiers) {
	$block: get-block(unquote("#{&}"));
	$classes: "";
	
	@each $modifier in $modifiers {
		$classes: unquote("#{$classes}.#{$block}#{$bem-modifier-separator}#{$modifier}");
	}
	
	@return unquote("#{$classes} &");
}

/// Selector of adjacent relationship.
///
/// @param {String} $element - Name of element that will come after ".[block]__"
///
/// @returns {String} - & + .[block]__[element]
///
/// @see {mixin} next

@function next-selector($element) {
	$block: get-block(unquote("#{&}"));

	@return unquote("& + .#{$block}#{$bem-element-separator}#{$element}");
}

/// Selector of duo relationship.
///
/// @returns {String} - & + &
///
/// @see {mixin} duo

@function duo-selector() {
	$list: explode(unquote("#{&}"), ' ');
	$last: nth($list, length($list));

	@return unquote("& + #{$last}");
}

/// Selector of sibling relationship.
///
/// @param {String} $element - Name of element that will come after ".[block]__"
///
/// @returns {String} - & ~ .[block]__[element]
///
/// @see {mixin} with

@function with-selector($element) {
	$block: get-block(unquote("#{&}"));

	@return unquote("& ~ .#{$block}#{$bem-element-separator}#{$element}");
}

/// Selector of while relationship.
///
/// @param {String} $modifier - Name of modifier that will come after ".[block]--"
///
/// @returns {String} - .[block]--[modifier]
///
/// @see {mixin} while

@function while-selector($modifier) {
	$block: get-block(unquote("#{&}"));

	@return unquote("&.#{$block}#{$bem-modifier-separator}#{$modifier}");
}
